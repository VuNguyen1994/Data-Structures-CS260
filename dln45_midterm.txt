Name: Dinh Nguyen
CS 260 Midterm

Essay Questions
1)
    f1 = 2 ** (math.log2(n))
    f2 = math.log2(n)
    f3 = n**2
    f4 = math.factorial(n)
    f5 = math.exp(n)
    f6 = 12
    f7 = n * math.log2(n)
    f8 = n**5 / (n**2)
    f9 = 1/n
    f10 = n * math.sqrt(n)

    2 |            2.00 |            1.00 |            4.00 |            2.00 |            7.39 |           12.00 |            2.00 |            8.00 |            0.50 |            2.83
    4 |            4.00 |            2.00 |           16.00 |           24.00 |           54.60 |           12.00 |            8.00 |           64.00 |            0.25 |            8.00
    8 |            8.00 |            3.00 |           64.00 |        40320.00 |         2980.96 |           12.00 |           24.00 |          512.00 |            0.12 |           22.63
   16 |           16.00 |            4.00 |          256.00 | 20922789888000.00 |      8886110.52 |           12.00 |           64.00 |         4096.00 |            0.06 |           64.00
   32 |           32.00 |            5.00 |         1024.00 | 263130836933693517766352317727113216.00 | 78962960182680.69 |           12.00 |          160.00 |        32768.00 |            0.03 |          181.02

From left to right are values of n, and functions f1 to f10. 
Based on the data, when n got larger, f4 and f5 increase much faster, so f4 has fastest growth rate, followed by f5
We can compared the largest values to sort the functions. 
I took out the f4 and f5 and calculate the data again with larger n. 
n		f1		f2			f3		f6		f7		f8		f9			f10
    2 |            2.00 |            1.00 |            4.00 |           12.00 |            2.00 |            8.00 |            0.50 |            2.83
    4 |            4.00 |            2.00 |           16.00 |           12.00 |            8.00 |           64.00 |            0.25 |            8.00
    8 |            8.00 |            3.00 |           64.00 |           12.00 |           24.00 |          512.00 |            0.12 |           22.63
   16 |           16.00 |            4.00 |          256.00 |           12.00 |           64.00 |         4096.00 |            0.06 |           64.00
   32 |           32.00 |            5.00 |         1024.00 |           12.00 |          160.00 |        32768.00 |            0.03 |          181.02
   64 |           64.00 |            6.00 |         4096.00 |           12.00 |          384.00 |       262144.00 |            0.02 |          512.00
  128 |          128.00 |            7.00 |        16384.00 |           12.00 |          896.00 |      2097152.00 |            0.01 |         1448.15
  256 |          256.00 |            8.00 |        65536.00 |           12.00 |         2048.00 |     16777216.00 |            0.00 |         4096.00
  512 |          512.00 |            9.00 |       262144.00 |           12.00 |         4608.00 |    134217728.00 |            0.00 |        11585.24
 1024 |         1024.00 |           10.00 |      1048576.00 |           12.00 |        10240.00 |   1073741824.00 |            0.00 |        32768.00
 2048 |         2048.00 |           11.00 |      4194304.00 |           12.00 |        22528.00 |   8589934592.00 |            0.00 |        92681.90
 4096 |         4096.00 |           12.00 |     16777216.00 |           12.00 |        49152.00 |  68719476736.00 |            0.00 |       262144.00
 8192 |         8192.00 |           13.00 |     67108864.00 |           12.00 |       106496.00 | 549755813888.00 |            0.00 |       741455.20
 16384 |        16384.00 |           14.00 |    268435456.00 |           12.00 |       229376.00 | 4398046511104.00 |            0.00 |      2097152.00
Thus, the order of functions from fastest to slowest growth rate is:
f4, f5, f8, f3, f10, f7, f1, f2, f6, f9

2)
a) Closed Hash Table - Go to the next available if collision
Row 0: 90
Row 1: 50
Row 2: 82
Row 3: 53
Row 4: 99
Row 5: 62
Row 6: 26
Row 7: 87
Row 8: 79
Row 9: 69 

b)
Open Hash Table: Append to the end of the list if row is occupied.
Row 0: [90, 50]
Row 1: []
Row 2: [82, 62]
Row 3: [53]
Row 4: []
Row 5: []
Row 6: [26]
Row 7: [87]
Row 8: []
Row 9: [69, 99, 79] 

3)
2 situations array better than linked list:
- accessing an nth element. For array: O(1), For linked list: O(n)
- easily accessing the previous element of nth element using index. 

2 situations linked list better than array:
- Insert to the beginning
- Insert to the middle
Array: To insert an element to position p, we have to reorganize the rest of the array.
Linked list: inserting a new node to position p of a linked list, we just need to create a new node and then update the pointers. 

Won’t matter which was used:
Linear search for a value from the front to the end of an array or linked list is the same. (O(n))

Pseucode Questions:
5)
Using quick sort

Pivot = last element of Bolts array
Sorted Nuts array based on that pivot Bolts and find out the index i such that Nuts[0] … Nuts[i-1] < Pivot Bolt and Nuts[i+1] … last Nuts > Pivot Bolt
Using that Nut[i] we can partition the Bolts array as the same manner.
Do this recursively with sub-array of nuts and bolts (left sub array is Nuts/Bolts smaller than previous matched pair and right sub array is larger ones)

6)
def reverseStack(S,Q):
	if S.isEmpty:
		return
	while not S.isEmpty:
		Q.enqueue(S.pop) #take all item in stack from top to bottom and store it in Q
	while not Q.isEmpty:
		S.push(Q.dequeue) #take item out of Q, top first so top will be pushed to bottom of Stack S
8)
def recursive_insertion_sort(A, n):
    # Base case when list only have 1 or 0 element
    if n <= 1:
        return

    # Sort A[1 ... n-1]
    recursive_insertion_sort(A, n - 1)

    # Insert A[n] in to sorted array A[1 ... n-1]
    element_n_th = A[n - 1]
    i = n - 2

    while i >= 0 and A[i] > element_n_th:
        A[i + 1] = A[i]
        i -= 1

    A[i + 1] = element_n_th


import random
arr = [random.randint(0, 100) for _ in range(0, 10)]
print(arr)
n = len(arr)
recursive_insertion_sort(arr, n)
print(arr)

9)
def remainder(a, b):
    if a < b:
        return a
    else:
        return remainder(a - b, b)


def test_case_1():
    assert remainder(0, 1) == 0

def test_case_2():
    assert remainder(5, 2) == 1

def test_case_3():
    assert remainder(100, 25) == 0

def test_case_4():
    assert remainder(99, 2) == 1

def test_case_5():
    assert remainder(25, 11) == 3

def test_case_6():
    assert remainder(1000000, 1000) == 0

def test_case_7():
    assert remainder(65, 4) == 1

def test_case_8():
    assert remainder(3456, 123) == 12

def test_case_9():
    assert remainder(33, 100) == 33

def test_case_10():
    assert remainder(0, 1000) == 0

	
				